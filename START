$ gcc -Wall -Wextra DynStat.c -o dynstat

DynStat.c:13:2: warning: implicitly declaring library function 'printf' with type 'int (const char *, ...)'
        printf(argv[1]);
        ^
DynStat.c:13:2: note: please include the header <stdio.h> or explicitly provide a declaration for 'printf'
DynStat.c:13:9: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
        printf(argv[1]);
               ^~~~~~~
DynStat.c:15:15: warning: implicitly declaring library function 'malloc' with type 'void *(unsigned long)'
        buf = (char*)malloc(sizeof(char)*size + 1);
                     ^
DynStat.c:15:15: note: please include the header <stdlib.h> or explicitly provide a declaration for 'malloc'
DynStat.c:17:2: warning: implicit declaration of function 'strcpy_s' is invalid in C99 [-Wimplicit-function-declaration]
        strcpy_s(buf, sizeof(buf), argv[2]);
        ^
DynStat.c:27:11: warning: implicitly declaring library function 'strlen' with type 'unsigned long (const char *)'
        length = strlen(buf);
                 ^
DynStat.c:27:11: note: please include the header <string.h> or explicitly provide a declaration for 'strlen'
DynStat.c:31:9: warning: implicit declaration of function 'free' is invalid in C99 [-Wimplicit-function-declaration]
        free(buf);
        ^
DynStat.c:6:14: warning: unused parameter 'argc' [-Wunused-parameter]
int main(int argc, char *argv[])
             ^
7 warnings generated.
Undefined symbols for architecture x86_64:
  "_strcpy_s", referenced from:
      _main in DynStat-bd2b81.o
ld: symbol(s) not found for architecture x86_64
clang: error: linker command failed with exit code 1 (use -v to see invocation)

-- strcpy_s is Microsoft Windows specific which is not present in the standard C library.
-- we need to include header file containing declaration of the functions.

$ gcc -Wall -Wextra DynStat.c -o dynstat

DynStat.c:17:9: warning: format string is not a string literal (potentially insecure) [-Wformat-security]
        printf(argv[1]);
               ^~~~~~~
DynStat.c:10:14: warning: unused parameter 'argc' [-Wunused-parameter]
int main(int argc, char *argv[])
             ^
DynStat.c:21:32: warning: 'strncpy' call operates on objects of type 'char' while the size is based on a different type 'char *' [-Wsizeof-pointer-memaccess]
        strncpy(buf, argv[2],  sizeof(buf));
                ~~~                   ^~~
DynStat.c:21:32: note: did you mean to provide an explicit length?
        strncpy(buf, argv[2],  sizeof(buf));
                                      ^~~
DynStat.c:28:38: warning: 'strncpy' call operates on objects of type 'char' while the size is based on a different type 'char *' [-Wsizeof-pointer-memaccess]
        strncpy(buf, "testdubuffer", sizeof(buf));      
                ~~~                         ^~~
DynStat.c:28:38: note: did you mean to provide an explicit length?
        strncpy(buf, "testdubuffer", sizeof(buf));      
                                            ^~~
4 warnings generated

$ flawfinder DynStat.c 

.
Flawfinder version 1.27, (C) 2001-2004 David A. Wheeler.
Number of dangerous functions in C/C++ ruleset: 160
Examining DynStat.c
DynStat.c:17:  [4] (format) printf:
  If format strings can be influenced by an attacker, they can be
  exploited. Use a constant for the format specification. 
DynStat.c:21:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. 
DynStat.c:28:  [1] (buffer) strncpy:
  Easily used incorrectly; doesn't always \0-terminate or check for
  invalid pointers. Risk is low because the source is a constant string.
DynStat.c:30:  [1] (buffer) strlen:
  Does not handle strings that are not \0-terminated (it could cause a
  crash if unprotected). 

Hits = 4
Lines analyzed = 37 in 0.51 seconds (4897 lines/second)
Physical Source Lines of Code (SLOC) = 37
Hits@level = [0]   0 [1]   3 [2]   0 [3]   0 [4]   1 [5]   0
Hits@level+ = [0+]   4 [1+]   4 [2+]   1 [3+]   1 [4+]   1 [5+]   0
Hits/KSLOC@level+ = [0+] 108.108 [1+] 108.108 [2+] 27.027 [3+] 27.027 [4+] 27.027 [5+]   0
Minimum risk level = 1
Not every hit is necessarily a security vulnerability.
There may be other security vulnerabilities; review your code!

$ valgrind --leak-check=full --track-origins=yes ./DynStat hello world

hellobuffer : world
buffer : testdubu
==1210== Memcheck, a memory error detector
==1210== Copyright (C) 2002-2013, and GNU GPL'd, by Julian Seward et al.
==1210== Using Valgrind-3.10.0 and LibVEX; rerun with -h for copyright info
==1210== Command: ./DynStat hello world
==1210== 
--1210-- ./DynStat:
--1210-- dSYM directory is missing; consider using --dsymutil=yes
==1210== Conditional jump or move depends on uninitialised value(s)
==1210==    at 0x7E9A: strlen (in /usr/local/Cellar/valgrind/3.10.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1210==    by 0x100000EDF: main (in ./DynStat)
==1210==  Uninitialised value was created by a heap allocation
==1210==    at 0x66CB: malloc (in /usr/local/Cellar/valgrind/3.10.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1210==    by 0x100000E6C: main (in ./DynStat)
==1210== 
==1210== Conditional jump or move depends on uninitialised value(s)
==1210==    at 0x7E9A: strlen (in /usr/local/Cellar/valgrind/3.10.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1210==    by 0x18BDCA: __vfprintf (in /usr/lib/system/libsystem_c.dylib)
==1210==    by 0x1B02DA: __v2printf (in /usr/lib/system/libsystem_c.dylib)
==1210==    by 0x1B06AF: __xvprintf (in /usr/lib/system/libsystem_c.dylib)
==1210==    by 0x187B29: vfprintf_l (in /usr/lib/system/libsystem_c.dylib)
==1210==    by 0x18596F: printf (in /usr/lib/system/libsystem_c.dylib)
==1210==    by 0x100000F05: main (in ./DynStat)
==1210==  Uninitialised value was created by a heap allocation
==1210==    at 0x66CB: malloc (in /usr/local/Cellar/valgrind/3.10.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1210==    by 0x100000E6C: main (in ./DynStat)
==1210== 
==1210== 
==1210== HEAP SUMMARY:
==1210==     in use at exit: 28,979 bytes in 372 blocks
==1210==   total heap usage: 448 allocs, 76 frees, 34,923 bytes allocated
==1210== 
==1210== 17 bytes in 1 blocks are definitely lost in loss record 10 of 77
==1210==    at 0x66CB: malloc (in /usr/local/Cellar/valgrind/3.10.0/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==1210==    by 0x100000E6C: main (in ./DynStat)
==1210== 
==1210== LEAK SUMMARY:
==1210==    definitely lost: 17 bytes in 1 blocks
==1210==    indirectly lost: 0 bytes in 0 blocks
==1210==      possibly lost: 0 bytes in 0 blocks
==1210==    still reachable: 4,096 bytes in 1 blocks
==1210==         suppressed: 24,866 bytes in 370 blocks
==1210== Reachable blocks (those to which a pointer was found) are not shown.
==1210== To see them, rerun with: --leak-check=full --show-leak-kinds=all
==1210== 
==1210== For counts of detected and suppressed errors, rerun with: -v
==1210== ERROR SUMMARY: 3 errors from 3 contexts (suppressed: 15 from 15)
